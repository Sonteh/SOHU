2021/03/25
    - FlexNetworkTransform
        + Added Smoothing Loop option. Smoothing can now optionally be performed in LateUpdate.
        + Massive performance update. FlexNetworkTransform now has virtually no impact from it's operations. These changes resulted in roughly a 15% performance boost while under load and a 200-300% boost under normal conditions. More refactoring is expected but nothing that would risk stability or need testing.

2021/02/26
    - FlexNetworkAnimator
        + Zero garbage collection release! FlexNetworkAnimator is roughly 2X faster than NetworkAnimator now.
        + Bandwidth usage improvements; now uses about 4.5% the bandwidth of NetworkAnimator.
        + Better client authoritative animations, and protections. Like NetworkAnimator, previously animations from clients could be missed if the client sent too many animations too quickly. FlexNetworkAnimator now has protection against excessive animations from clients and ensures proper replication, so long as client isn't abusing the network.

2021/02/05
	- FlexNetworkTransform
		+ Zero garbage collection release! Performances improved by a minimum of 17%.
		+ Bandwidth usage scales better. 500 objects now use roughly 4% less bandwidth.
		+ MirrorNG officially supported again.

	- FlexNetworkAnimator
		+ Fixed NRE related to compressing large values.
		+ Fixed not all cached data being reset when changing animator or controller.
		+ MirrorNG officially supported again.
		+ Garbage collection is still present in this release; FNA is receiving the same optimizations as FNT next release.

2021/01/29
	- FlexNetworkTransform
		+ SetPlatform renamed to SetAttached; SetPlatform marked obsolete.
		+ SetAttached can now be used to attach to child objects, such as picking up world objects in your players hand! View READ ME for more information.

2021/01/17
	- FlexNetworkTransform
		+ Fixed server not sending updates when running as a server build while using timed interval while having a low tick rate.

2021/01/09
	- Improvements
		+ Component scripts now have the FirstGearGames icon on them.

	- FlexNetworkTransform
		+ Improved tooltip text.
	
	- FlexNetworkAnimator
		+ You may now set the animator and controller at runtime. You must manually synchronize these changes.
		+ Added README for new API.

2021/01/02
	- FlexNetworkTransform
		+ Set maximum MTU to 1200 for manager.
		+ No longer experimental!
		+ Renamed 'stable' package to 'old'.

	- FlexNetworkAnimator
		+ Fixed a typo on a file name.
		+ Set maximum MTU to 1200 for manager.

2020/12/31
	- FlexNetworkTransform
		- Backported 'precise synchronization' fixes to stable.

	- FlexNetworkAnimator
		- Built from the ground up! Previously FlexNetworkAnimator was using code from NetworkAnimator; that is no more! FlexNetworkAnimator now only uses 11-13% the bandwidth of NetworkAnimator and has a scaling 200% FPS gain over NetworkAnimator.

2020/12/24
	- FlexNetworkTransform
		+ Fixed transforms not synchronizing when having more than one FlexNetworkTransform on an object, whether it be a child FlexNetworkTransform, or FlexNetworkTransform on a child object.
		+ Reduced chances of extrapolation overshooting when using client authoritative movement on poor connections.
		+ Added back in sequence checking for unreliable packets when sending from client to server. This was intentionally removed with intentions to be added back in after testing recent changes.
		+ Fixed possibility of some packets being ignored when they shouldn't be when synchronizing hundreds of objects.
		+ Clients now use recent optimizations when sending to server; in the previous update only server was using the optimizations.
		+ Fixed extrapolation regularly overshooting and not properly expiring.

2020/12/18
	- FlexNetworkTransform
		+ Made Compress Small Values enabled by default.
		+ Massive performance improvements. FlexNetworkTransform does substantially better with bandwidth and frame rate compared to competitors.

	- FlexNetworkAnimator
		+ Fixed breaks caused by Mirror upgrade.

2020/12/17
	- FlexNetworkTransform
		+ Removed precise synchronization option, it's now always on.
		+ Reduced bandwidth usage by 10%; more drastic reductions under investigation.
		+ Improved performance by 15%.
		+ Added Compress Small Values option. When enabled will compress small values to the 100th decimal place; this saves additional bandwidth at the cost of precision.

	- ReactivePhysicsObject
		+ Removed precise synchronization option, it's now always on.

2020/12/05
	- FlexNetworkTransform
		+ Fixed data sending excessively due to failed transform changes.
		+ Unreliable sends can now optionally resend data. True to resend transform data with every unreliable packet. At the cost of bandwidth this will ensure smoother movement on very unstable connections but generally is not needed.
		+ Added Favor Performance option while using timed intervals. While true FlexNetworkTransform will favor performance over update frequency. This is ideal when transform updates can be delayed very slightly.
		+ More bandwidth saved by limiting who can receive remote actions.

2020/12/01
	- FlexNetworkTransform
		+ Platform support improved; transforms previously struggled to stay synchronized with rotating platforms, or very long platforms. Transforms now stay in perfect synchronization under all conditions.
		+ More rotation compression; reduced rotation sends by 2 bytes.

2020/11/18
	- FlexNetworkTransform
		+ Added the ability to synchronize to networked platforms using FlexNetworkTransform.SetPlatform(platformNetworkIdentity). View FlexNetworkTransform README for more information.

	- FlexNetworkAnimator
		+ Fixed animations not going back to owner when using Synchronize To Owner.
		+ Fixed client authoritative animations not working on client host. (regression from synchronize to owner fix 2020/11/18)

2020/11/01
	- FlexNetworkTransform
		+ Transforms are no longer forced into their last properties when synchronization for the property is disabled.

2020/10/29
	- FlexNetworkTransform
		+ Fixed server sometimes not sending latest transform data while running as client host, while trading authority on scene objects.

2020/10/07
	- FlexNetworkTransform
		+ Added Teleport Threshold. Transform will teleport if threshold value is not 0, and if distance between current position and target position is greater than value.
		+ New compression on rotation for better accuracy.
		+ FlexNetworkTransform and FlexNetworkTransformChild will now immediately synchronize current transform properties for new clients. This change addresses a bug where FlexNetworkTransformChild would not have correct transform properties if the object has moved prior to the player joining, but not after. This also adds support for using FlexNetworkTransform directly on children objects when the networking solution allows child networked objects.
		+ MirrorNG support added. Also the start of allowing support for even more networking platforms.
		+ You can now hook into FlexNetworkTransform/Child to validate data received from clients when using Client Authority. See README in FlexNetworkTransform folder.
		+ SequenceId is now a uint, resulting in less bandwidth used for UDP/Unreliable.
		+ Objects can no longer be moved by clients while server has not yet sent data. This is most commonly seen when a player spawns in and transforms haven't yet changed.

2020/10/01
	- FlexNetworkAnimator
		+ Initial release.

2020/09/27
	- FlexNetworkTransform
		+ Fixed FlexNetworkTransformChild not sending transform properties to late joiners until the child object has moved.
		+ Automatic Interpolation and Interpolation strength have been removed. Use Interpolation Fallbehind instead. This is how far the transform will stay behind it's actual position to compensate for packet loss and throttle.
		+ Extrapolation is back, and better than ever. Extrapolation Span is how long the transform can extrapolate for when a new packet is expected but does not arrive. This can be combined with a low Interpolation Fallbehind value for near real-time accuracy.
		+ Fixed properties sometimes not updating to spectators when server was running as client host, while another client was also client authoritative.
		+ Fixed properties sometimes sending even when they have not changed; no visual disturbance could be seen but this was incuring bandwidth cost.
		+ Updated inspector to be more helpful.

2020/09/02
	- FlexNetworkTransform:
		+ Fixed transforms not moving to a rotation if the change was very small; most commonly seen in 2D games. This was due to Unity incorrectly reporting that rotation values were matching.
		+ Fixed extrapolation being applied to a transforms position even when a position update did not occur. This could be seen when rotating or scaling while not moving.

2020/08/27
	- FlexNetworkTransform:
		+ Fixed data sending excessively when synchronizing rotation while using world space.

2020/08/23
	- FlexNetworkTransform:
		+ Fixed position snapping being applied to scale.
		+ Improvements to performance.

2020/08/19    
	- FlexNetworkTransform:
        + Minor improvements to extrapolation.

2020/08/09
	- FastProximityChecker:
		+ There is now a `Continuous` option, which is the default behavior. When enabled FastProximityChecker will regularly perform visibility checks. When false visibility checks will only occur on start, and when called manually. This change is useful if you know the object and other objects will always be in range on spawn, such as for a card or board game.

	- FlexNetworkTransform:
		+ Can now choose between Interval and FixedUpdate for when data is synchronized.
		+ Supports reliable and unreliable synchronization methods. For best results use Unreliable with a UDP transport.
		+ Removed ability to disable Enforce Results.
		+ Added extrapolation to help predict movement when network traffic becomes unsteady.
		+ Added UseLocalSpace. True by default to synchronize using localSpace values. False to use world space. Can be useful if you have a habbit of making child networked objects.
		+ PreciseSynchronization is now false by default.

	- ReactivePhysicsObject:
		+ Can now choose between Interval and FixedUpdate for when data is synchronized.
		+ Supports reliable and unreliable synchronization methods. For best results use Unreliable with a UDP transport.
		+ Added PreciseSynchronization. True to synchronize data anytime it has changed. False to allow greater differences before synchronizing. Given that rigidbodies often shift continuously it's recommended to leave this false to not flood the network.
		+ Added UseLocalSpace. True by default to synchronize using localSpace values. False to use world space. Can be useful if you have a habbit of making child networked objects.
		+ Objects now snap into place when unable to meet synchronization goal after a duration. This effect often goes unnoticed as the difference is minuscule due to floating point imprecisions.
		+ Added "AllowTeleport()" method. Calling the method clears the data to synchronize to, until another is received. This can be useful to call before teleporting an object locally, so it doesn't snap back to it's synchronized data. You would also want to move the same on the server.
		+ Added "ReduceAggressiveness()" method. This method temporarily reduces how aggressive the gameObject will move towards the last received synchronization data. Ideally you will call this method every time your controller moves your object.

2020/07/26
	- Organized files. It's much more clear now what is demo code, and actual content.
	- Fixed bug in FastProximityChecker that would sometimes cause objects to not unhide when in range.

2020/07/12
	- ReactivePhysicsObject now automatically determines if a controller or not. You must only set if object is 2D or 3D.
	- FlexNetworkTransform and ReactivePhysicsObject can now synchronize using world space values rather than the default local space. Although not recommended, this can be useful if you need to child a networked object.